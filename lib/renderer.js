// Generated by CoffeeScript 1.10.0
(function() {
  var $, Highlights, _, cheerio, convertCodeBlocksToAtomEditors, fs, highlighter, packagePath, path, render, resolveImagePaths, resourcePath, figlet, sanitize, scopeForFenceName, tokenizeCodeBlocks;

  path = require('path');

  _ = require('underscore-plus');

  cheerio = require('cheerio');

  fs = require('fs-plus');

  Highlights = require('highlights');

  $ = require('atom-space-pen-views').$;

  figlet = null;

  highlighter = null;

  resourcePath = atom.getLoadSettings().resourcePath;

  packagePath = path.dirname(__dirname);

  exports.toDOMFragment = function(text, filePath, grammar, callback) {
    if (text == null) {
      text = '';
    }
    return render(text, filePath, function(error, html) {
      var defaultCodeLanguage, domFragment, template;
      if (error != null) {
        return callback(error);
      }
      template = document.createElement('template');
      template.innerHTML = html;
      domFragment = template.content.cloneNode(true);
      //if ((grammar != null ? grammar.scopeName : void 0) === 'source.litcoffee') {
      //  defaultCodeLanguage = 'javascript';
      //}
      //convertCodeBlocksToAtomEditors(domFragment, defaultCodeLanguage);
      return callback(null, domFragment);
    });
  };

  exports.toHTML = function(text, filePath, grammar, callback) {
    if (text == null) {
      text = '';
    }
    return render(text, filePath, function(error, html) {
      var defaultCodeLanguage;
      if (error != null) {
        return callback(error);
      }
      //if ((grammar != null ? grammar.scopeName : void 0) === 'source.litcoffee') {
      //  defaultCodeLanguage = 'javascript';
      //}
      //html = tokenizeCodeBlocks(html, defaultCodeLanguage);
      return callback(null, html);
    });
  };

  render = function(text, filePath, callback) {
    var options;
    // if (figlet == null) {
    //   figlet = require('figlet');
    // }
    options = {
      sanitize: false,
      breaks: atom.config.get('jsdoc-preview.breakOnSingleNewline')
    };
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');


    // return figlet(text, options, function(err, asciiArt) {
    //   if (err) {
    //     return callback(error);
    //   } else {
    //     return callback(null, "<pre>" + asciiArt + "</pre>");
    //   }
    // });

    jdh = require('./jsdoc-helper');
    return jdh(text, function(error, html) {
      if (error != null) {
          return callback(error);
        }
        html = sanitize(html);
        html = resolveImagePaths(html, filePath);
        return callback(error, html);
    });

    // var Promise = require('bluebird');
    // var spawn = require('child_process').spawn;

    // var pr = new Promise(function(resolve, reject) {
    //   var ls = spawn('ls', ['-lh', text]);

    //   var stdOutBuff = "";

    //   ls.stdout.on('data', function(data) {
    //       stdOutBuff += data;
    //   });

    //   ls.stderr.on('data', function(data){
    //     console.log("stderr: " + data);
    //   });

    //   ls.on('close', function(code) {
    //       resolve(stdOutBuff);
    //   });
    // });

    // return pr.then(function(text) { return callback(null, "<pre>" + text + "</pre>"); });

    // return callback(null, "<pre>" + text + "</pre>");

    // return roaster(text, options, function(error, html) {
    //   if (error != null) {
    //     return callback(error);
    //   }
    //   html = sanitize(html);
    //   html = resolveImagePaths(html, filePath);
    //   return callback(null, html.trim());
    // });

  };

  sanitize = function(html) {
    var attribute, attributesToRemove, i, len, o;
    o = cheerio.load(html);
    o('script').remove();
    attributesToRemove = ['onabort', 'onblur', 'onchange', 'onclick', 'ondbclick', 'onerror', 'onfocus', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onmousedown', 'onmousemove', 'onmouseover', 'onmouseout', 'onmouseup', 'onreset', 'onresize', 'onscroll', 'onselect', 'onsubmit', 'onunload'];
    for (i = 0, len = attributesToRemove.length; i < len; i++) {
      attribute = attributesToRemove[i];
      o('*').removeAttr(attribute);
    }
    return o.html();
  };

  resolveImagePaths = function(html, filePath) {
    var i, img, imgElement, len, o, ref, rootDirectory, src;
    rootDirectory = atom.project.relativizePath(filePath)[0];
    o = cheerio.load(html);
    ref = o('img');
    for (i = 0, len = ref.length; i < len; i++) {
      imgElement = ref[i];
      img = o(imgElement);
      if (src = img.attr('src')) {
        if (src.match(/^(https?|atom):\/\//)) {
          continue;
        }
        if (src.startsWith(process.resourcesPath)) {
          continue;
        }
        if (src.startsWith(resourcePath)) {
          continue;
        }
        if (src.startsWith(packagePath)) {
          continue;
        }
        if (src[0] === '/') {
          if (!fs.isFileSync(src)) {
            if (rootDirectory) {
              img.attr('src', path.join(rootDirectory, src.substring(1)));
            }
          }
        } else {
          img.attr('src', path.resolve(path.dirname(filePath), src));
        }
      }
    }
    return o.html();
  };

  // convertCodeBlocksToAtomEditors = function(domFragment, defaultLanguage) {
  //   var codeBlock, codeElement, editor, editorElement, fenceName, fontFamily, grammar, i, j, len, len1, preElement, ref, ref1, ref2, ref3, ref4;
  //   if (defaultLanguage == null) {
  //     defaultLanguage = 'text';
  //   }
  //   if (fontFamily = atom.config.get('editor.fontFamily')) {
  //     ref = domFragment.querySelectorAll('code');
  //     for (i = 0, len = ref.length; i < len; i++) {
  //       codeElement = ref[i];
  //       codeElement.style.fontFamily = fontFamily;
  //     }
  //   }
  //   ref1 = domFragment.querySelectorAll('pre');
  //   for (j = 0, len1 = ref1.length; j < len1; j++) {
  //     preElement = ref1[j];
  //     codeBlock = (ref2 = preElement.firstElementChild) != null ? ref2 : preElement;
  //     fenceName = (ref3 = (ref4 = codeBlock.getAttribute('class')) != null ? ref4.replace(/^lang-/, '') : void 0) != null ? ref3 : defaultLanguage;
  //     editorElement = document.createElement('atom-text-editor');
  //     editorElement.setAttributeNode(document.createAttribute('gutter-hidden'));
  //     editorElement.removeAttribute('tabindex');
  //     preElement.parentNode.insertBefore(editorElement, preElement);
  //     preElement.remove();
  //     editor = editorElement.getModel();
  //     editor.getDecorations({
  //       "class": 'cursor-line',
  //       type: 'line'
  //     })[0].destroy();
  //     editor.setText(codeBlock.textContent.trim());
  //     if (grammar = atom.grammars.grammarForScopeName(scopeForFenceName(fenceName))) {
  //       editor.setGrammar(grammar);
  //     }
  //   }
  //   return domFragment;
  // };

  // tokenizeCodeBlocks = function(html, defaultLanguage) {
  //   var codeBlock, fenceName, fontFamily, highlightedBlock, highlightedHtml, i, len, o, preElement, ref, ref1, ref2;
  //   if (defaultLanguage == null) {
  //     defaultLanguage = 'text';
  //   }
  //   o = cheerio.load(html);
  //   if (fontFamily = atom.config.get('editor.fontFamily')) {
  //     o('code').css('font-family', fontFamily);
  //   }
  //   ref = o("pre");
  //   for (i = 0, len = ref.length; i < len; i++) {
  //     preElement = ref[i];
  //     codeBlock = o(preElement).children().first();
  //     fenceName = (ref1 = (ref2 = codeBlock.attr('class')) != null ? ref2.replace(/^lang-/, '') : void 0) != null ? ref1 : defaultLanguage;
  //     if (highlighter == null) {
  //       highlighter = new Highlights({
  //         registry: atom.grammars
  //       });
  //     }
  //     highlightedHtml = highlighter.highlightSync({
  //       fileContents: codeBlock.text(),
  //       scopeName: scopeForFenceName(fenceName)
  //     });
  //     highlightedBlock = o(highlightedHtml);
  //     highlightedBlock.removeClass('editor').addClass("lang-" + fenceName);
  //     o(preElement).replaceWith(highlightedBlock);
  //   }
  //   return o.html();
  // };

}).call(this);
